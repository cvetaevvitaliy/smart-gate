<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [mesh\bootloader\mesh_bootloader_serial_armcc_nrf52833_xxAA.elf]</title></head>
<body><HR>
<H1>Static Call Graph for image mesh\bootloader\mesh_bootloader_serial_armcc_nrf52833_xxAA.elf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Tue Nov 03 12:48:52 2020
<BR><P>
<H3>Maximum Stack Usage =       1108 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
SWI2_EGU2_IRQHandler &rArr; mesh_aci_command_check &rArr; serial_command_handler &rArr; bootloader_cmd_send &rArr; bl_cmd_handler &rArr; dfu_mesh_timeout &rArr; signature_check &rArr; uECC_verify &rArr; vli_modMult_n &rArr; vli_mult &rArr; muladd
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[4]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">NMI_Handler</a><BR>
 <LI><a href="#[6]">MemoryManagement_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">MemoryManagement_Handler</a><BR>
 <LI><a href="#[7]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">BusFault_Handler</a><BR>
 <LI><a href="#[8]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">UsageFault_Handler</a><BR>
 <LI><a href="#[9]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SVC_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[7]">BusFault_Handler</a> from arm_startup_nrf52833.o(.text) referenced from arm_startup_nrf52833.o(RESET)
 <LI><a href="#[1c]">CCM_AAR_IRQHandler</a> from arm_startup_nrf52833.o(.text) referenced from arm_startup_nrf52833.o(RESET)
 <LI><a href="#[20]">COMP_LPCOMP_IRQHandler</a> from arm_startup_nrf52833.o(.text) referenced from arm_startup_nrf52833.o(RESET)
 <LI><a href="#[a]">DebugMon_Handler</a> from arm_startup_nrf52833.o(.text) referenced from arm_startup_nrf52833.o(RESET)
 <LI><a href="#[1b]">ECB_IRQHandler</a> from arm_startup_nrf52833.o(.text) referenced from arm_startup_nrf52833.o(RESET)
 <LI><a href="#[31]">FPU_IRQHandler</a> from arm_startup_nrf52833.o(.text) referenced from arm_startup_nrf52833.o(RESET)
 <LI><a href="#[13]">GPIOTE_IRQHandler</a> from arm_startup_nrf52833.o(.text) referenced from arm_startup_nrf52833.o(RESET)
 <LI><a href="#[5]">HardFault_Handler</a> from main.o(.text) referenced from arm_startup_nrf52833.o(RESET)
 <LI><a href="#[30]">I2S_IRQHandler</a> from arm_startup_nrf52833.o(.text) referenced from arm_startup_nrf52833.o(RESET)
 <LI><a href="#[2b]">MWU_IRQHandler</a> from arm_startup_nrf52833.o(.text) referenced from arm_startup_nrf52833.o(RESET)
 <LI><a href="#[6]">MemoryManagement_Handler</a> from arm_startup_nrf52833.o(.text) referenced from arm_startup_nrf52833.o(RESET)
 <LI><a href="#[12]">NFCT_IRQHandler</a> from arm_startup_nrf52833.o(.text) referenced from arm_startup_nrf52833.o(RESET)
 <LI><a href="#[4]">NMI_Handler</a> from arm_startup_nrf52833.o(.text) referenced from arm_startup_nrf52833.o(RESET)
 <LI><a href="#[2a]">PDM_IRQHandler</a> from arm_startup_nrf52833.o(.text) referenced from arm_startup_nrf52833.o(RESET)
 <LI><a href="#[d]">POWER_CLOCK_IRQHandler</a> from arm_startup_nrf52833.o(.text) referenced from arm_startup_nrf52833.o(RESET)
 <LI><a href="#[29]">PWM0_IRQHandler</a> from arm_startup_nrf52833.o(.text) referenced from arm_startup_nrf52833.o(RESET)
 <LI><a href="#[2c]">PWM1_IRQHandler</a> from arm_startup_nrf52833.o(.text) referenced from arm_startup_nrf52833.o(RESET)
 <LI><a href="#[2d]">PWM2_IRQHandler</a> from arm_startup_nrf52833.o(.text) referenced from arm_startup_nrf52833.o(RESET)
 <LI><a href="#[34]">PWM3_IRQHandler</a> from arm_startup_nrf52833.o(.text) referenced from arm_startup_nrf52833.o(RESET)
 <LI><a href="#[b]">PendSV_Handler</a> from arm_startup_nrf52833.o(.text) referenced from arm_startup_nrf52833.o(RESET)
 <LI><a href="#[1f]">QDEC_IRQHandler</a> from arm_startup_nrf52833.o(.text) referenced from arm_startup_nrf52833.o(RESET)
 <LI><a href="#[e]">RADIO_IRQHandler</a> from transport.o(.text) referenced from arm_startup_nrf52833.o(RESET)
 <LI><a href="#[1a]">RNG_IRQHandler</a> from arm_startup_nrf52833.o(.text) referenced from arm_startup_nrf52833.o(RESET)
 <LI><a href="#[18]">RTC0_IRQHandler</a> from bootloader_rtc.o(.text) referenced from arm_startup_nrf52833.o(RESET)
 <LI><a href="#[1e]">RTC1_IRQHandler</a> from arm_startup_nrf52833.o(.text) referenced from arm_startup_nrf52833.o(RESET)
 <LI><a href="#[2f]">RTC2_IRQHandler</a> from arm_startup_nrf52833.o(.text) referenced from arm_startup_nrf52833.o(RESET)
 <LI><a href="#[3]">Reset_Handler</a> from arm_startup_nrf52833.o(.text) referenced from arm_startup_nrf52833.o(RESET)
 <LI><a href="#[14]">SAADC_IRQHandler</a> from arm_startup_nrf52833.o(.text) referenced from arm_startup_nrf52833.o(RESET)
 <LI><a href="#[10]">SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</a> from arm_startup_nrf52833.o(.text) referenced from arm_startup_nrf52833.o(RESET)
 <LI><a href="#[11]">SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</a> from arm_startup_nrf52833.o(.text) referenced from arm_startup_nrf52833.o(RESET)
 <LI><a href="#[2e]">SPIM2_SPIS2_SPI2_IRQHandler</a> from arm_startup_nrf52833.o(.text) referenced from arm_startup_nrf52833.o(RESET)
 <LI><a href="#[35]">SPIM3_IRQHandler</a> from arm_startup_nrf52833.o(.text) referenced from arm_startup_nrf52833.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from arm_startup_nrf52833.o(.text) referenced from arm_startup_nrf52833.o(RESET)
 <LI><a href="#[21]">SWI0_EGU0_IRQHandler</a> from transport.o(.text) referenced from arm_startup_nrf52833.o(RESET)
 <LI><a href="#[22]">SWI1_EGU1_IRQHandler</a> from serial_handler_uart.o(.text) referenced from arm_startup_nrf52833.o(RESET)
 <LI><a href="#[23]">SWI2_EGU2_IRQHandler</a> from bootloader.o(.text) referenced from arm_startup_nrf52833.o(RESET)
 <LI><a href="#[24]">SWI3_EGU3_IRQHandler</a> from bootloader.o(.text) referenced from arm_startup_nrf52833.o(RESET)
 <LI><a href="#[25]">SWI4_EGU4_IRQHandler</a> from arm_startup_nrf52833.o(.text) referenced from arm_startup_nrf52833.o(RESET)
 <LI><a href="#[26]">SWI5_EGU5_IRQHandler</a> from arm_startup_nrf52833.o(.text) referenced from arm_startup_nrf52833.o(RESET)
 <LI><a href="#[c]">SysTick_Handler</a> from arm_startup_nrf52833.o(.text) referenced from arm_startup_nrf52833.o(RESET)
 <LI><a href="#[3b]">SystemInit</a> from system_nrf52833.o(.text) referenced from arm_startup_nrf52833.o(.text)
 <LI><a href="#[19]">TEMP_IRQHandler</a> from arm_startup_nrf52833.o(.text) referenced from arm_startup_nrf52833.o(RESET)
 <LI><a href="#[15]">TIMER0_IRQHandler</a> from arm_startup_nrf52833.o(.text) referenced from arm_startup_nrf52833.o(RESET)
 <LI><a href="#[16]">TIMER1_IRQHandler</a> from arm_startup_nrf52833.o(.text) referenced from arm_startup_nrf52833.o(RESET)
 <LI><a href="#[17]">TIMER2_IRQHandler</a> from arm_startup_nrf52833.o(.text) referenced from arm_startup_nrf52833.o(RESET)
 <LI><a href="#[27]">TIMER3_IRQHandler</a> from arm_startup_nrf52833.o(.text) referenced from arm_startup_nrf52833.o(RESET)
 <LI><a href="#[28]">TIMER4_IRQHandler</a> from arm_startup_nrf52833.o(.text) referenced from arm_startup_nrf52833.o(RESET)
 <LI><a href="#[f]">UARTE0_UART0_IRQHandler</a> from serial_handler_uart.o(.text) referenced from arm_startup_nrf52833.o(RESET)
 <LI><a href="#[33]">UARTE1_IRQHandler</a> from arm_startup_nrf52833.o(.text) referenced from arm_startup_nrf52833.o(RESET)
 <LI><a href="#[32]">USBD_IRQHandler</a> from arm_startup_nrf52833.o(.text) referenced from arm_startup_nrf52833.o(RESET)
 <LI><a href="#[8]">UsageFault_Handler</a> from arm_startup_nrf52833.o(.text) referenced from arm_startup_nrf52833.o(RESET)
 <LI><a href="#[1d]">WDT_IRQHandler</a> from arm_startup_nrf52833.o(.text) referenced from arm_startup_nrf52833.o(RESET)
 <LI><a href="#[3d]">__main</a> from __main.o(!!!main) referenced from arm_startup_nrf52833.o(.text)
 <LI><a href="#[54]">bl_cmd_handler</a> from bootloader_app_bridge.o(.text) referenced from bootloader_app_bridge.o(.text)
 <LI><a href="#[36]">bl_evt_handler</a> from bootloader.o(.text) referenced from bootloader.o(.text)
 <LI><a href="#[3a]">radio_idle_cb</a> from transport.o(.text) referenced from transport.o(.text)
 <LI><a href="#[39]">radio_rx_cb</a> from transport.o(.text) referenced from transport.o(.text)
 <LI><a href="#[38]">radio_tx_cb</a> from transport.o(.text) referenced from transport.o(.text)
 <LI><a href="#[37]">rx_cb</a> from bootloader.o(.text) referenced from bootloader.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[3d]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[3e]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[40]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[12f]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[130]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[41]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[131]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[47]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[42]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[132]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[133]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[134]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[135]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[136]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[137]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[138]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[139]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[13a]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[13b]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[13c]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[13d]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[13e]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[13f]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[140]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[141]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[142]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[143]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[144]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[145]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[4c]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[146]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[147]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[148]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[149]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[14a]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[14b]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[14c]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[3f]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[14d]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[44]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[46]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[14e]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[48]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 1068 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; bootloader_enable &rArr; bl_cmd_handler &rArr; dfu_mesh_timeout &rArr; signature_check &rArr; uECC_verify &rArr; vli_modMult_n &rArr; vli_mult &rArr; muladd
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14f]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[119]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[4b]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[150]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[4d]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[a0]"></a>__asm___17_bootloader_util_c_c13d365c__bootloader_util_reset</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, bootloader_util.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_util_app_start
</UL>

<P><STRONG><a name="[23]"></a>SWI2_EGU2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bootloader.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1108 + Unknown Stack Size
<LI>Call Chain = SWI2_EGU2_IRQHandler &rArr; mesh_aci_command_check &rArr; serial_command_handler &rArr; bootloader_cmd_send &rArr; bl_cmd_handler &rArr; dfu_mesh_timeout &rArr; signature_check &rArr; uECC_verify &rArr; vli_modMult_n &rArr; vli_mult &rArr; muladd
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_aci_command_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52833.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>SWI3_EGU3_IRQHandler</STRONG> (Thumb, 238 bytes, Stack size 56 bytes, bootloader.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1060 + Unknown Stack Size
<LI>Call Chain = SWI3_EGU3_IRQHandler &rArr; bl_cmd_handler &rArr; dfu_mesh_timeout &rArr; signature_check &rArr; uECC_verify &rArr; vli_modMult_n &rArr; vli_mult &rArr; muladd
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_handler_uart_disable
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_flash_store
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_flash_erase
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_pop
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_is_empty
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_util_app_start
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_info_entry_get
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bl_cmd_handler
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52833.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>bootloader_abort</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, bootloader.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bootloader_abort &rArr; dfu_mesh_app_is_valid &rArr; fw_is_verified &rArr; bootloader_info_entry_get &rArr; info_entry_get
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_handler_uart_disable
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_disable
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_disable
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_is_empty
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_mesh_app_is_valid
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_util_app_start
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_info_entry_get
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_timeout
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bl_evt_handler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5f]"></a>bootloader_cmd_send</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bootloader.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1004 + Unknown Stack Size
<LI>Call Chain = bootloader_cmd_send &rArr; bl_cmd_handler &rArr; dfu_mesh_timeout &rArr; signature_check &rArr; uECC_verify &rArr; vli_modMult_n &rArr; vli_mult &rArr; muladd
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bl_cmd_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_command_handler
</UL>

<P><STRONG><a name="[6f]"></a>bootloader_init</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, bootloader.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1052 + Unknown Stack Size
<LI>Call Chain = bootloader_init &rArr; bl_cmd_handler &rArr; dfu_mesh_timeout &rArr; signature_check &rArr; uECC_verify &rArr; vli_modMult_n &rArr; vli_mult &rArr; muladd
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_aci_init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_bank_scan
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_app_bridge_init
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bl_cmd_handler
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[77]"></a>bootloader_enable</STRONG> (Thumb, 264 bytes, Stack size 64 bytes, bootloader.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1068 + Unknown Stack Size
<LI>Call Chain = bootloader_enable &rArr; bl_cmd_handler &rArr; dfu_mesh_timeout &rArr; signature_check &rArr; uECC_verify &rArr; vli_modMult_n &rArr; vli_mult &rArr; muladd
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_start
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_aci_start
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_mesh_req
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_mesh_missing_type_get
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_mesh_app_is_valid
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_bank_flash
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_info_entry_overwrite
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_info_entry_get
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bl_cmd_handler
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7d]"></a>bootloader_timeout</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, bootloader.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1044 + Unknown Stack Size
<LI>Call Chain = bootloader_timeout &rArr; bl_cmd_handler &rArr; dfu_mesh_timeout &rArr; signature_check &rArr; uECC_verify &rArr; vli_modMult_n &rArr; vli_mult &rArr; muladd
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bl_cmd_handler
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC0_IRQHandler
</UL>

<P><STRONG><a name="[54]"></a>bl_cmd_handler</STRONG> (Thumb, 324 bytes, Stack size 48 bytes, bootloader_app_bridge.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1004 + Unknown Stack Size
<LI>Call Chain = bl_cmd_handler &rArr; dfu_mesh_timeout &rArr; signature_check &rArr; uECC_verify &rArr; vli_modMult_n &rArr; vli_mult &rArr; muladd
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_transfer_flash_write_complete
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_mesh_timeout
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_mesh_rx
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_mesh_restart
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_mesh_relay
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_mesh_on_flash_idle
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_mesh_init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_bank_on_flash_idle
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_info_on_flash_op_end
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_info_on_flash_idle
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_info_init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_info_entry_put
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_info_entry_invalidate
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_mesh_start
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_mesh_req
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_bank_flash
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_info_entry_get
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_timeout
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_enable
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_cmd_send
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI3_EGU3_IRQHandler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bl_evt_handler
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bootloader_app_bridge.o(.text)
</UL>
<P><STRONG><a name="[73]"></a>bootloader_app_bridge_init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, bootloader_app_bridge.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_init
</UL>

<P><STRONG><a name="[8c]"></a>bootloader_evt_send</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bootloader_app_bridge.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_fwid_packet
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_missing_data
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_bank_notifications
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_progress_event
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_data_req_packet
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_data_packet
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_rx_data
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notify_state_packet
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_target
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_set
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_tx_dynamic
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_bank_entry_fw
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_mesh_on_flash_idle
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_abort
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_end_evt
</UL>

<P><STRONG><a name="[8b]"></a>send_end_evt</STRONG> (Thumb, 24 bytes, Stack size 40 bytes, bootloader_app_bridge.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = send_end_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_abort
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_rx_start
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_info_pointers
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_mesh_timeout
</UL>

<P><STRONG><a name="[8d]"></a>flash_write</STRONG> (Thumb, 36 bytes, Stack size 56 bytes, bootloader_app_bridge.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = flash_write &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_evt_send
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_transfer_data
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_write
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_header_invalidate
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_page_write_next_data
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_page_write_meta
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_info_init
</UL>

<P><STRONG><a name="[8f]"></a>flash_erase</STRONG> (Thumb, 32 bytes, Stack size 48 bytes, bootloader_app_bridge.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = flash_erase &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_evt_send
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_transfer_start
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_page
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_info_on_flash_idle
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_info_init
</UL>

<P><STRONG><a name="[90]"></a>tx_abort</STRONG> (Thumb, 22 bytes, Stack size 40 bytes, bootloader_app_bridge.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tx_abort
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_data_packet
</UL>

<P><STRONG><a name="[a3]"></a>bootloader_is_in_application</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bootloader_app_bridge.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_bank_entry_fw
</UL>

<P><STRONG><a name="[97]"></a>entry_invalidate</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, bootloader_info.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = entry_invalidate &rArr; entry_header_invalidate &rArr; flash_write &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_info_header_get
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_header_invalidate
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;info_entry_get
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_info_entry_invalidate
</UL>

<P><STRONG><a name="[9b]"></a>entry_write</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, bootloader_info.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = entry_write &rArr; flash_write &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_write_buffer
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_info_entry_put
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_info_entry_overwrite
</UL>

<P><STRONG><a name="[7e]"></a>bootloader_info_init</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, bootloader_info.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = bootloader_info_init &rArr; flash_write &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_info_first_unused_get
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bl_cmd_handler
</UL>

<P><STRONG><a name="[57]"></a>bootloader_info_entry_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bootloader_info.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bootloader_info_entry_get &rArr; info_entry_get
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;info_entry_get
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_is_verified
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_is_newer
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_is_newer
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_bank_notifications
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_target
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_info_pointers
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_bank_entry
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_bank_entry_fw
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_info_entry_put
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_upgrade
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_mesh_missing_type_get
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_mesh_app_is_valid
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_bank_scan
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_bank_flash
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_info_entry_overwrite
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bl_cmd_handler
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_enable
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_abort
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI3_EGU3_IRQHandler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bl_evt_handler
</UL>

<P><STRONG><a name="[9d]"></a>bootloader_info_reset</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, bootloader_info.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = bootloader_info_reset &rArr; copy_page &rArr; flash_erase &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_page
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_mesh_finalize
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_info_entry_put
</UL>

<P><STRONG><a name="[84]"></a>bootloader_info_entry_put</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, bootloader_info.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = bootloader_info_entry_put &rArr; entry_write &rArr; flash_write &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_info_reset
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_write
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_info_header_get
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_header_invalidate
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_info_entry_get
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_mesh_finalize
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_target
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_bank_entry
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bl_cmd_handler
</UL>

<P><STRONG><a name="[7a]"></a>bootloader_info_entry_overwrite</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, bootloader_info.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = bootloader_info_entry_overwrite &rArr; entry_write &rArr; flash_write &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_write
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_info_header_get
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_info_entry_get
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_target
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_bank_entry
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_bank_entry_fw
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_enable
</UL>

<P><STRONG><a name="[85]"></a>bootloader_info_entry_invalidate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bootloader_info.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = bootloader_info_entry_invalidate &rArr; entry_invalidate &rArr; entry_header_invalidate &rArr; flash_write &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_target
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_bank_entry
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bl_cmd_handler
</UL>

<P><STRONG><a name="[d0]"></a>bootloader_info_stable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bootloader_info.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_mesh_on_flash_idle
</UL>

<P><STRONG><a name="[87]"></a>bootloader_info_on_flash_op_end</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, bootloader_info.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = bootloader_info_on_flash_op_end &rArr; copy_page_on_flash_op_end &rArr; copy_page_write_next_data &rArr; flash_write &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_page_on_flash_op_end
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_info_first_unused_get
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_page
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_write_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bl_cmd_handler
</UL>

<P><STRONG><a name="[88]"></a>bootloader_info_on_flash_idle</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, bootloader_info.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bootloader_info_on_flash_idle &rArr; copy_page_write_meta &rArr; flash_write &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_page_write_meta
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bl_cmd_handler
</UL>

<P><STRONG><a name="[18]"></a>RTC0_IRQHandler</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, bootloader_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1060 + Unknown Stack Size
<LI>Call Chain = RTC0_IRQHandler &rArr; bootloader_timeout &rArr; bl_cmd_handler &rArr; dfu_mesh_timeout &rArr; signature_check &rArr; uECC_verify &rArr; vli_modMult_n &rArr; vli_mult &rArr; muladd
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_rtc_irq_handler
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_timeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52833.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>rtc_init</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, bootloader_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_init
</UL>

<P><STRONG><a name="[59]"></a>bootloader_util_app_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bootloader_util.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___17_bootloader_util_c_c13d365c__bootloader_util_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_abort
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI3_EGU3_IRQHandler
</UL>

<P><STRONG><a name="[76]"></a>dfu_bank_scan</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, dfu_bank.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = dfu_bank_scan &rArr; flash_bank_entry &rArr; flash_bank_entry_fw &rArr; bootloader_info_entry_overwrite &rArr; entry_write &rArr; flash_write &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_bank_entry
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_info_entry_get
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_init
</UL>

<P><STRONG><a name="[6b]"></a>dfu_bank_flash</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, dfu_bank.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = dfu_bank_flash &rArr; flash_bank_entry &rArr; flash_bank_entry_fw &rArr; bootloader_info_entry_overwrite &rArr; entry_write &rArr; flash_write &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_bank_entry
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_info_entry_get
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bl_cmd_handler
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_enable
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bl_evt_handler
</UL>

<P><STRONG><a name="[89]"></a>dfu_bank_on_flash_idle</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, dfu_bank.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = dfu_bank_on_flash_idle &rArr; flash_bank_entry &rArr; flash_bank_entry_fw &rArr; bootloader_info_entry_overwrite &rArr; entry_write &rArr; flash_write &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_bank_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bl_cmd_handler
</UL>

<P><STRONG><a name="[cc]"></a>dfu_bank_transfer_in_progress</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dfu_bank.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_mesh_start
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7f]"></a>dfu_mesh_init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, dfu_mesh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = dfu_mesh_init &rArr; get_info_pointers &rArr; send_end_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_info_pointers
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bl_cmd_handler
</UL>

<P><STRONG><a name="[60]"></a>dfu_mesh_start</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, dfu_mesh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = dfu_mesh_start &rArr; send_bank_notifications &rArr; bootloader_info_entry_get &rArr; info_entry_get
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_cache_flush
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_find_fwid
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_bank_notifications
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_info_pointers
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_bank_transfer_in_progress
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_mesh_on_flash_idle
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bl_cmd_handler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bl_evt_handler
</UL>

<P><STRONG><a name="[7c]"></a>dfu_mesh_req</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, dfu_mesh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = dfu_mesh_req &rArr; start_req &rArr; beacon_set &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_req
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bl_cmd_handler
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_enable
</UL>

<P><STRONG><a name="[82]"></a>dfu_mesh_relay</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, dfu_mesh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = dfu_mesh_relay &rArr; beacon_set &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwid_union_cpy
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_beacon_type
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_set
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bl_cmd_handler
</UL>

<P><STRONG><a name="[80]"></a>dfu_mesh_rx</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, dfu_mesh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = dfu_mesh_rx &rArr; handle_data_packet &rArr; target_rx_start &rArr; start_target &rArr; bootloader_info_entry_put &rArr; entry_write &rArr; flash_write &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_in_cache
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_fwid_packet
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_progress_event
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_data_req_packet
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_state_packet
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_data_packet
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bl_cmd_handler
</UL>

<P><STRONG><a name="[ce]"></a>dfu_mesh_finalize</STRONG> (Thumb, 304 bytes, Stack size 192 bytes, dfu_mesh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = dfu_mesh_finalize &rArr; bootloader_info_entry_put &rArr; entry_write &rArr; flash_write &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwid_union_cpy
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_info_reset
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_info_entry_put
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_mesh_timeout
</UL>

<P><STRONG><a name="[81]"></a>dfu_mesh_timeout</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, dfu_mesh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 956 + Unknown Stack Size
<LI>Call Chain = dfu_mesh_timeout &rArr; signature_check &rArr; uECC_verify &rArr; vli_modMult_n &rArr; vli_mult &rArr; muladd
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_mesh_finalize
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_req
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signature_check
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_end_evt
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bl_cmd_handler
</UL>

<P><STRONG><a name="[7b]"></a>dfu_mesh_missing_type_get</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, dfu_mesh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dfu_mesh_missing_type_get &rArr; bootloader_info_entry_get &rArr; info_entry_get
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_info_entry_get
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_enable
</UL>

<P><STRONG><a name="[5c]"></a>dfu_mesh_app_is_valid</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, dfu_mesh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dfu_mesh_app_is_valid &rArr; fw_is_verified &rArr; bootloader_info_entry_get &rArr; info_entry_get
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_is_verified
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_info_entry_get
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_enable
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_abort
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bl_evt_handler
</UL>

<P><STRONG><a name="[83]"></a>dfu_mesh_restart</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dfu_mesh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = dfu_mesh_restart &rArr; start_find_fwid &rArr; beacon_set &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_find_fwid
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bl_cmd_handler
</UL>

<P><STRONG><a name="[8a]"></a>dfu_mesh_on_flash_idle</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, dfu_mesh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = dfu_mesh_on_flash_idle &rArr; dfu_mesh_start &rArr; send_bank_notifications &rArr; bootloader_info_entry_get &rArr; info_entry_get
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwid_union_cpy
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_transfer_end
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_info_pointers
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_info_stable
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_evt_send
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_mesh_start
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bl_cmd_handler
</UL>

<P><STRONG><a name="[d7]"></a>dfu_transfer_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dfu_transfer_mesh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dfu_transfer_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_transfer_start
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_transfer_end
</UL>

<P><STRONG><a name="[b5]"></a>dfu_transfer_start</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, dfu_transfer_mesh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = dfu_transfer_start &rArr; flash_erase &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_transfer_init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_target
</UL>

<P><STRONG><a name="[bf]"></a>dfu_transfer_data</STRONG> (Thumb, 290 bytes, Stack size 48 bytes, dfu_transfer_mesh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = dfu_transfer_data &rArr; flash_write &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_abort
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;segment_is_missing
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_rx_data
</UL>

<P><STRONG><a name="[ca]"></a>dfu_transfer_has_entry</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, dfu_transfer_mesh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dfu_transfer_has_entry &rArr; segment_is_missing
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;segment_is_missing
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_data_req_packet
</UL>

<P><STRONG><a name="[d2]"></a>dfu_transfer_get_oldest_missing_entry</STRONG> (Thumb, 102 bytes, Stack size 48 bytes, dfu_transfer_mesh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = dfu_transfer_get_oldest_missing_entry
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_missing_data
</UL>

<P><STRONG><a name="[aa]"></a>dfu_transfer_sha256</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dfu_transfer_mesh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = dfu_transfer_sha256 &rArr; sha256_update &rArr; sha256_transform
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_update
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signature_check
</UL>

<P><STRONG><a name="[d1]"></a>dfu_transfer_end</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dfu_transfer_mesh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dfu_transfer_end &rArr; dfu_transfer_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_transfer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_mesh_on_flash_idle
</UL>

<P><STRONG><a name="[86]"></a>dfu_transfer_flash_write_complete</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dfu_transfer_mesh.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bl_cmd_handler
</UL>

<P><STRONG><a name="[b1]"></a>fwid_union_cpy</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, dfu_util.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_mesh_finalize
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_bank_notifications
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notify_state_packet
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_req
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_mesh_relay
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_mesh_on_flash_idle
</UL>

<P><STRONG><a name="[c8]"></a>fwid_union_cmp</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, dfu_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fwid_union_cmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_state_packet
</UL>

<P><STRONG><a name="[c7]"></a>fwid_union_id_cmp</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfu_util.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_packet_matches_our_req
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_state_packet
</UL>

<P><STRONG><a name="[da]"></a>fwid_union_version_cmp</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, dfu_util.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_packet_matches_our_req
</UL>

<P><STRONG><a name="[d9]"></a>tid_cache_has_entry</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, dfu_util.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_packet_matches_our_req
</UL>

<P><STRONG><a name="[c5]"></a>ready_packet_matches_our_req</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, dfu_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ready_packet_matches_our_req
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tid_cache_has_entry
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwid_union_version_cmp
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwid_union_id_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_state_packet
</UL>

<P><STRONG><a name="[be]"></a>addr_from_seg</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, dfu_util.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_rx_data
</UL>

<P><STRONG><a name="[6a]"></a>is_upgrade</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, dfu_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = is_upgrade &rArr; bootloader_info_entry_get &rArr; info_entry_get
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_info_entry_get
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bl_evt_handler
</UL>

<P><STRONG><a name="[d4]"></a>app_is_newer</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, dfu_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_is_newer &rArr; bootloader_info_entry_get &rArr; info_entry_get
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_info_entry_get
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_fwid_packet
</UL>

<P><STRONG><a name="[d3]"></a>bootloader_is_newer</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, dfu_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bootloader_is_newer &rArr; bootloader_info_entry_get &rArr; info_entry_get
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_info_entry_get
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_fwid_packet
</UL>

<P><STRONG><a name="[cf]"></a>fw_is_verified</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, dfu_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fw_is_verified &rArr; bootloader_info_entry_get &rArr; info_entry_get
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_info_entry_get
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_mesh_app_is_valid
</UL>

<P><STRONG><a name="[bc]"></a>tid_cache_entry_put</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dfu_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tid_cache_entry_put
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_data_packet
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_rx_start
</UL>

<P><STRONG><a name="[c3]"></a>packet_in_cache</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, dfu_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = packet_in_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_data_req_packet
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_data_packet
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_mesh_rx
</UL>

<P><STRONG><a name="[af]"></a>packet_cache_put</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, dfu_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = packet_cache_put
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_data_packet
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_packet
</UL>

<P><STRONG><a name="[ba]"></a>packet_cache_flush</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dfu_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = packet_cache_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_rx_start
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_mesh_start
</UL>

<P><STRONG><a name="[b4]"></a>section_overlap</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, dfu_util.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_rx_start
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_target
</UL>

<P><STRONG><a name="[5d]"></a>interrupts_disable</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, dfu_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = interrupts_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_bank_entry_fw
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_abort
</UL>

<P><STRONG><a name="[72]"></a>fifo_init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fifo.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_handler_init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init
</UL>

<P><STRONG><a name="[6d]"></a>fifo_push</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, fifo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fifo_push
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_handler_event_send
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bl_evt_handler
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_rx
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_rx_cb
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_order
</UL>

<P><STRONG><a name="[55]"></a>fifo_pop</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, fifo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fifo_pop
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI3_EGU3_IRQHandler
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_handler_command_get
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI1_EGU1_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI0_EGU0_IRQHandler
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_event_handler
</UL>

<P><STRONG><a name="[e3]"></a>fifo_get_len</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fifo.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_handler_credit_available
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_event_handler
</UL>

<P><STRONG><a name="[db]"></a>fifo_peek_at</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, fifo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fifo_peek_at
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_peek
</UL>

<P><STRONG><a name="[dc]"></a>fifo_peek</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fifo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fifo_peek &rArr; fifo_peek_at
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_peek_at
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_event_handler
</UL>

<P><STRONG><a name="[107]"></a>fifo_is_full</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fifo.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_handler_event_send
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_rx
</UL>

<P><STRONG><a name="[56]"></a>fifo_is_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fifo.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_abort
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI3_EGU3_IRQHandler
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTE0_UART0_IRQHandler
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init
</UL>

<P><STRONG><a name="[51]"></a>app_error_handler_bare</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_mesh_finalize
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_ready
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_rx_start
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_target
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_bank_entry
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_bank_entry_fw
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_info_reset
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_write
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_invalidate
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_header_invalidate
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_page_write_next_data
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_write_buffer
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_info_init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_info_entry_put
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_packet_ref_count_dec
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bl_cmd_handler
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_timeout
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_enable
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_abort
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI3_EGU3_IRQHandler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bl_evt_handler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI0_EGU0_IRQHandler
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_event_handler
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_packet_ref_count_inc
</UL>

<P><STRONG><a name="[5]"></a>HardFault_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52833.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>main</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1068 + Unknown Stack Size
<LI>Call Chain = main &rArr; bootloader_enable &rArr; bl_cmd_handler &rArr; dfu_mesh_timeout &rArr; signature_check &rArr; uECC_verify &rArr; vli_modMult_n &rArr; vli_mult &rArr; muladd
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_bank_transfer_in_progress
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_enable
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[ec]"></a>mesh_packet_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mesh_packet.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_init
</UL>

<P><STRONG><a name="[61]"></a>mesh_packet_acquire</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, mesh_packet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mesh_packet_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bl_evt_handler
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;order_scan
</UL>

<P><STRONG><a name="[dd]"></a>mesh_packet_ref_count_inc</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, mesh_packet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mesh_packet_ref_count_inc
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_rtc_irq_handler
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_tx
</UL>

<P><STRONG><a name="[65]"></a>mesh_packet_ref_count_dec</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, mesh_packet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mesh_packet_ref_count_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_rtc_irq_handler
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_tx_abort
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_tx
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bl_evt_handler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI0_EGU0_IRQHandler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_rx_cb
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_tx_cb
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;order_scan
</UL>

<P><STRONG><a name="[eb]"></a>mesh_packet_ref_count_get</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mesh_packet.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI0_EGU0_IRQHandler
</UL>

<P><STRONG><a name="[62]"></a>mesh_packet_set_local_addr</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, mesh_packet.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bl_evt_handler
</UL>

<P><STRONG><a name="[5a]"></a>mesh_packet_adv_data_get</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, mesh_packet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mesh_packet_adv_data_get
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_cb
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_tx_cb
</UL>

<P><STRONG><a name="[53]"></a>nrf_flash_erase</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, nrf_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_flash_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI3_EGU3_IRQHandler
</UL>

<P><STRONG><a name="[52]"></a>nrf_flash_store</STRONG> (Thumb, 108 bytes, Stack size 28 bytes, nrf_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrf_flash_store
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI3_EGU3_IRQHandler
</UL>

<P><STRONG><a name="[5e]"></a>radio_disable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, radio_control.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_abort
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_event_handler
</UL>

<P><STRONG><a name="[de]"></a>radio_init</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, radio_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = radio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_is_empty
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeslot_is_in_ts
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_init
</UL>

<P><STRONG><a name="[e1]"></a>radio_order</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, radio_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = radio_order &rArr; fifo_push
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_push
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeslot_is_in_ts
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_rtc_irq_handler
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;order_scan
</UL>

<P><STRONG><a name="[e2]"></a>radio_event_handler</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, radio_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = radio_event_handler &rArr; setup_event
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_peek
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_get_len
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_disable
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_pop
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_event
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_IRQHandler
</UL>

<P><STRONG><a name="[e7]"></a>rand_prng_get</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rand_prng_get
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_next_tx
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand_prng_seed
</UL>

<P><STRONG><a name="[e6]"></a>rand_hw_rng_get</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rand_hw_rng_get
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand_prng_seed
</UL>

<P><STRONG><a name="[e5]"></a>rand_prng_seed</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rand_prng_seed &rArr; rand_hw_rng_get
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand_hw_rng_get
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand_prng_get
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_init
</UL>

<P><STRONG><a name="[79]"></a>transport_start</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, transport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = transport_start &rArr; order_scan &rArr; radio_order &rArr; fifo_push
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;order_scan
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_enable
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI0_EGU0_IRQHandler
</UL>

<P><STRONG><a name="[21]"></a>SWI0_EGU0_IRQHandler</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, transport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SWI0_EGU0_IRQHandler &rArr; transport_start &rArr; order_scan &rArr; radio_order &rArr; fifo_push
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_start
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_packet_ref_count_dec
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_pop
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_packet_ref_count_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52833.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>RADIO_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, transport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RADIO_IRQHandler &rArr; radio_event_handler &rArr; setup_event
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_event_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52833.o(RESET)
</UL>
<P><STRONG><a name="[df]"></a>timeslot_is_in_ts</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, transport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_order
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init
</UL>

<P><STRONG><a name="[75]"></a>transport_init</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, transport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = transport_init &rArr; rand_prng_seed &rArr; rand_hw_rng_get
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_init
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand_prng_seed
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_packet_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_init
</UL>

<P><STRONG><a name="[64]"></a>transport_tx</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, transport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = transport_tx &rArr; set_next_tx &rArr; rand_prng_get
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_packet_ref_count_dec
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;order_next_rtc
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_next_tx
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_packet_ref_count_inc
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bl_evt_handler
</UL>

<P><STRONG><a name="[66]"></a>transport_tx_abort</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, transport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = transport_tx_abort &rArr; order_next_rtc
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_packet_ref_count_dec
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;order_next_rtc
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bl_evt_handler
</UL>

<P><STRONG><a name="[9f]"></a>transport_rtc_irq_handler</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, transport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = transport_rtc_irq_handler &rArr; set_next_tx &rArr; rand_prng_get
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_packet_ref_count_dec
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;order_next_rtc
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_next_tx
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_order
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_packet_ref_count_inc
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC0_IRQHandler
</UL>

<P><STRONG><a name="[ea]"></a>transport_tx_evt_get</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, transport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_command_handler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_tx_cb
</UL>

<P><STRONG><a name="[110]"></a>transport_tx_evt_set</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, transport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_command_handler
</UL>

<P><STRONG><a name="[ac]"></a>uECC_verify</STRONG> (Thumb, 540 bytes, Stack size 488 bytes, uECC.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 788<LI>Call Chain = uECC_verify &rArr; vli_modMult_n &rArr; vli_mult &rArr; muladd
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_bytesToNative
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modMult_fast
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modSub
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_cmp
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_set
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_testBit
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_isZero
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_clear
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modMult_n
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_add
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_z
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_double_jacobian
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modInv
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_sub
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_numBits
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signature_check
</UL>

<P><STRONG><a name="[106]"></a>sha256_transform</STRONG> (Thumb, 294 bytes, Stack size 324 bytes, sha256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = sha256_transform
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_update
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_final
</UL>

<P><STRONG><a name="[a8]"></a>sha256_init</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, sha256.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signature_check
</UL>

<P><STRONG><a name="[a9]"></a>sha256_update</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, sha256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = sha256_update &rArr; sha256_transform
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_transform
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_transfer_sha256
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signature_check
</UL>

<P><STRONG><a name="[ab]"></a>sha256_final</STRONG> (Thumb, 272 bytes, Stack size 16 bytes, sha256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = sha256_final &rArr; sha256_transform
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_transform
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signature_check
</UL>

<P><STRONG><a name="[22]"></a>SWI1_EGU1_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, serial_handler_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SWI1_EGU1_IRQHandler &rArr; fifo_pop
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_pop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52833.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>serial_handler_event_send</STRONG> (Thumb, 62 bytes, Stack size 48 bytes, serial_handler_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = serial_handler_event_send &rArr; fifo_push
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_is_full
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_push
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_aci_start
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bl_evt_handler
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_aci_rbc_event_handler
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_command_handler
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_rx
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_tx_cb
</UL>

<P><STRONG><a name="[f]"></a>UARTE0_UART0_IRQHandler</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, serial_handler_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = UARTE0_UART0_IRQHandler &rArr; char_rx &rArr; serial_handler_event_send &rArr; fifo_push
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_is_empty
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_rx
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_wait_for_completion
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52833.o(RESET)
</UL>
<P><STRONG><a name="[10a]"></a>serial_handler_init</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, serial_handler_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = serial_handler_init
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_init
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_aci_init
</UL>

<P><STRONG><a name="[10b]"></a>serial_handler_credit_available</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, serial_handler_uart.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_aci_start
</UL>

<P><STRONG><a name="[10c]"></a>serial_wait_for_completion</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, serial_handler_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = serial_wait_for_completion &rArr; UARTE0_UART0_IRQHandler &rArr; char_rx &rArr; serial_handler_event_send &rArr; fifo_push
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTE0_UART0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_command_handler
</UL>

<P><STRONG><a name="[10d]"></a>serial_handler_command_get</STRONG> (Thumb, 62 bytes, Stack size 48 bytes, serial_handler_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = serial_handler_command_get &rArr; fifo_pop
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_pop
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_aci_command_check
</UL>

<P><STRONG><a name="[58]"></a>serial_handler_uart_disable</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, serial_handler_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_abort
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI3_EGU3_IRQHandler
</UL>

<P><STRONG><a name="[74]"></a>mesh_aci_init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mesh_aci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mesh_aci_init &rArr; serial_handler_init
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_handler_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_init
</UL>

<P><STRONG><a name="[78]"></a>mesh_aci_start</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, mesh_aci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mesh_aci_start &rArr; serial_handler_event_send &rArr; fifo_push
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_handler_event_send
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_handler_credit_available
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_enable
</UL>

<P><STRONG><a name="[4f]"></a>mesh_aci_command_check</STRONG> (Thumb, 24 bytes, Stack size 40 bytes, mesh_aci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1108 + Unknown Stack Size
<LI>Call Chain = mesh_aci_command_check &rArr; serial_command_handler &rArr; bootloader_cmd_send &rArr; bl_cmd_handler &rArr; dfu_mesh_timeout &rArr; signature_check &rArr; uECC_verify &rArr; vli_modMult_n &rArr; vli_mult &rArr; muladd
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_command_handler
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_handler_command_get
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2_EGU2_IRQHandler
</UL>

<P><STRONG><a name="[112]"></a>mesh_aci_rbc_event_handler</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, mesh_aci.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_handler_event_send
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[151]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_nrf52833.o(.text), UNUSED)

<P><STRONG><a name="[3b]"></a>SystemInit</STRONG> (Thumb, 342 bytes, Stack size 12 bytes, system_nrf52833.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52833.o(.text)
</UL>
<P><STRONG><a name="[3]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, arm_startup_nrf52833.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52833.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52833.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52833.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>MemoryManagement_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52833.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52833.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52833.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52833.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52833.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52833.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52833.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52833.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52833.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52833.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52833.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52833.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52833.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52833.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>CCM_AAR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52833.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52833.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>COMP_LPCOMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52833.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52833.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>ECB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52833.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52833.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52833.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52833.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>GPIOTE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52833.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52833.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52833.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52833.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>MWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52833.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52833.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>NFCT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52833.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52833.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>PDM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52833.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52833.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>POWER_CLOCK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52833.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52833.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52833.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52833.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52833.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52833.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>PWM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52833.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52833.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>PWM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52833.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52833.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>QDEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52833.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52833.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52833.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52833.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>RTC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52833.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52833.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>RTC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52833.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52833.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>SAADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52833.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52833.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52833.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52833.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52833.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52833.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPIM2_SPIS2_SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52833.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52833.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>SPIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52833.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52833.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>SWI4_EGU4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52833.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52833.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>SWI5_EGU5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52833.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52833.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TEMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52833.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52833.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52833.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52833.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52833.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52833.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52833.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52833.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52833.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52833.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52833.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52833.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>UARTE1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52833.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52833.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>USBD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52833.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52833.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52833.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52833.o(RESET)
</UL>
<P><STRONG><a name="[118]"></a>__user_initial_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, arm_startup_nrf52833.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[68]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bl_evt_handler
</UL>

<P><STRONG><a name="[152]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[d6]"></a>__aeabi_llsl</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;segment_is_missing
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_transfer_get_oldest_missing_entry
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_transfer_data
</UL>

<P><STRONG><a name="[153]"></a>_ll_shift_l</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[a2]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwid_union_cmp
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_bank_entry_fw
</UL>

<P><STRONG><a name="[63]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_peek_at
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_transfer_has_entry
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_transfer_data
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_mesh_finalize
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_rx_data
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_set
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_handler_event_send
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_push
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_pop
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bl_evt_handler
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_aci_rbc_event_handler
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_command_handler
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_handler_command_get
</UL>

<P><STRONG><a name="[113]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[154]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[8e]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_mesh_finalize
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_bank_entry
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_write
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[155]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[156]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[157]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[50]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_mesh_finalize
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_target
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_bank_entry
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_write
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI3_EGU3_IRQHandler
</UL>

<P><STRONG><a name="[b9]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_cache_flush
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_rx_start
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_mesh_init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_mesh_start
</UL>

<P><STRONG><a name="[115]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[114]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[71]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_transfer_init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_final
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_find_fwid
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_set
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_mesh_init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_info_init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_mesh_start
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_init
</UL>

<P><STRONG><a name="[158]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[159]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[116]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[15a]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[15b]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[15c]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[45]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[4a]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[15d]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[117]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[15e]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[4e]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[15f]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[160]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[161]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[43]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[162]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[163]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[37]"></a>rx_cb</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, bootloader.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1036 + Unknown Stack Size
<LI>Call Chain = rx_cb &rArr; bl_cmd_handler &rArr; dfu_mesh_timeout &rArr; signature_check &rArr; uECC_verify &rArr; vli_modMult_n &rArr; vli_mult &rArr; muladd
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_packet_adv_data_get
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bl_cmd_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bootloader.o(.text)
</UL>
<P><STRONG><a name="[36]"></a>bl_evt_handler</STRONG> (Thumb, 572 bytes, Stack size 48 bytes, bootloader.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1052 + Unknown Stack Size
<LI>Call Chain = bl_evt_handler &rArr; bl_cmd_handler &rArr; dfu_mesh_timeout &rArr; signature_check &rArr; uECC_verify &rArr; vli_modMult_n &rArr; vli_mult &rArr; muladd
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_tx_abort
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_tx
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_handler_event_send
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_packet_set_local_addr
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_packet_ref_count_dec
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_packet_acquire
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_upgrade
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_push
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_mesh_start
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_mesh_app_is_valid
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_bank_flash
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_info_entry_get
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bl_cmd_handler
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_abort
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_timeout
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_timeout
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPendingIRQ
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bootloader.o(.text)
</UL>
<P><STRONG><a name="[6e]"></a>__NVIC_SetPendingIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, bootloader.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bl_evt_handler
</UL>

<P><STRONG><a name="[6c]"></a>set_timeout</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, bootloader.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_enable
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bl_evt_handler
</UL>

<P><STRONG><a name="[69]"></a>stop_timeout</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bootloader.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bl_evt_handler
</UL>

<P><STRONG><a name="[98]"></a>info_entry_get</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, bootloader_info.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = info_entry_get
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_invalidate
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_info_first_unused_get
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_info_entry_get
</UL>

<P><STRONG><a name="[91]"></a>free_write_buffer</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, bootloader_info.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = free_write_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_info_on_flash_op_end
</UL>

<P><STRONG><a name="[93]"></a>place_head_after_entry</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, bootloader_info.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_write_buffer
</UL>

<P><STRONG><a name="[92]"></a>get_write_buffer</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, bootloader_info.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_write_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;place_head_after_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_write
</UL>

<P><STRONG><a name="[94]"></a>copy_page_write_meta</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bootloader_info.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = copy_page_write_meta &rArr; flash_write &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_page_on_flash_op_end
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_info_on_flash_idle
</UL>

<P><STRONG><a name="[95]"></a>copy_page_write_next_data</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, bootloader_info.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = copy_page_write_next_data &rArr; flash_write &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_page_on_flash_op_end
</UL>

<P><STRONG><a name="[96]"></a>copy_page</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, bootloader_info.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = copy_page &rArr; flash_erase &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_info_reset
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_info_on_flash_op_end
</UL>

<P><STRONG><a name="[9a]"></a>entry_header_invalidate</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bootloader_info.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = entry_header_invalidate &rArr; flash_write &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_invalidate
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_info_entry_put
</UL>

<P><STRONG><a name="[99]"></a>bootloader_info_header_get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, bootloader_info.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_invalidate
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_info_first_unused_get
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_info_entry_put
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_info_entry_overwrite
</UL>

<P><STRONG><a name="[9c]"></a>bootloader_info_first_unused_get</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bootloader_info.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bootloader_info_first_unused_get &rArr; info_entry_get
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_info_header_get
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;info_entry_get
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_info_on_flash_op_end
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_info_init
</UL>

<P><STRONG><a name="[9e]"></a>copy_page_on_flash_op_end</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, bootloader_info.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = copy_page_on_flash_op_end &rArr; copy_page_write_next_data &rArr; flash_write &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_page_write_next_data
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_page_write_meta
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_info_on_flash_op_end
</UL>

<P><STRONG><a name="[a1]"></a>flash_bank_entry_fw</STRONG> (Thumb, 332 bytes, Stack size 64 bytes, dfu_bank.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = flash_bank_entry_fw &rArr; bootloader_info_entry_overwrite &rArr; entry_write &rArr; flash_write &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_is_in_application
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_evt_send
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_disable
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_info_entry_overwrite
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_info_entry_get
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_bank_entry
</UL>

<P><STRONG><a name="[a4]"></a>flash_bank_entry</STRONG> (Thumb, 330 bytes, Stack size 280 bytes, dfu_bank.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = flash_bank_entry &rArr; flash_bank_entry_fw &rArr; bootloader_info_entry_overwrite &rArr; entry_write &rArr; flash_write &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_bank_entry_fw
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_info_entry_put
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_info_entry_invalidate
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_info_entry_overwrite
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_info_entry_get
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_bank_on_flash_idle
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_bank_scan
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_bank_flash
</UL>

<P><STRONG><a name="[a5]"></a>get_info_pointers</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, dfu_mesh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = get_info_pointers &rArr; send_end_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_end_evt
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_info_entry_get
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_mesh_on_flash_idle
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_mesh_init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_mesh_start
</UL>

<P><STRONG><a name="[b8]"></a>segment_count_from_start_packet</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfu_mesh.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_data_packet
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_rx_start
</UL>

<P><STRONG><a name="[a6]"></a>packet_tx_dynamic</STRONG> (Thumb, 64 bytes, Stack size 56 bytes, dfu_mesh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = packet_tx_dynamic
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_data_req_packet
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_packet
</UL>

<P><STRONG><a name="[a7]"></a>signature_check</STRONG> (Thumb, 148 bytes, Stack size 160 bytes, dfu_mesh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 948<LI>Call Chain = signature_check &rArr; uECC_verify &rArr; vli_modMult_n &rArr; vli_mult &rArr; muladd
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_verify
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_update
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_final
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_transfer_sha256
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_mesh_timeout
</UL>

<P><STRONG><a name="[ad]"></a>beacon_set</STRONG> (Thumb, 240 bytes, Stack size 80 bytes, dfu_mesh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = beacon_set &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_evt_send
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_ready
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_find_fwid
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_state_packet
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_req
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_mesh_relay
</UL>

<P><STRONG><a name="[ae]"></a>relay_packet</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, dfu_mesh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = relay_packet &rArr; packet_tx_dynamic
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_cache_put
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_tx_dynamic
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_data_req_packet
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_data_packet
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_mesh_rx
</UL>

<P><STRONG><a name="[b0]"></a>start_req</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, dfu_mesh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = start_req &rArr; beacon_set &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwid_union_cpy
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_beacon_type
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_set
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_data_packet
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_rx_start
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_target
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_mesh_timeout
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_mesh_req
</UL>

<P><STRONG><a name="[b3]"></a>start_target</STRONG> (Thumb, 432 bytes, Stack size 192 bytes, dfu_mesh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = start_target &rArr; bootloader_info_entry_put &rArr; entry_write &rArr; flash_write &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;section_overlap
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_transfer_start
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_req
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_info_entry_put
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_info_entry_invalidate
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_evt_send
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_info_entry_overwrite
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_info_entry_get
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_rx_start
</UL>

<P><STRONG><a name="[b6]"></a>notify_state_packet</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, dfu_mesh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = notify_state_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwid_union_cpy
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_state_packet
</UL>

<P><STRONG><a name="[b7]"></a>target_rx_start</STRONG> (Thumb, 274 bytes, Stack size 32 bytes, dfu_mesh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = target_rx_start &rArr; start_target &rArr; bootloader_info_entry_put &rArr; entry_write &rArr; flash_write &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tid_cache_entry_put
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;section_overlap
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_cache_flush
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_find_fwid
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_target
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_req
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;segment_count_from_start_packet
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_end_evt
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_data_packet
</UL>

<P><STRONG><a name="[bd]"></a>target_rx_data</STRONG> (Thumb, 204 bytes, Stack size 72 bytes, dfu_mesh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = target_rx_data &rArr; request_missing_data &rArr; dfu_transfer_get_oldest_missing_entry
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_transfer_data
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_from_seg
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_missing_data
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_progress_event
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_evt_send
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_data_packet
</UL>

<P><STRONG><a name="[c2]"></a>handle_data_packet</STRONG> (Thumb, 342 bytes, Stack size 72 bytes, dfu_mesh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = handle_data_packet &rArr; target_rx_start &rArr; start_target &rArr; bootloader_info_entry_put &rArr; entry_write &rArr; flash_write &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tid_cache_entry_put
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_in_cache
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_cache_put
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_progress_event
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_rx_data
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_rx_start
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_req
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_packet
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;segment_count_from_start_packet
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_abort
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_mesh_rx
</UL>

<P><STRONG><a name="[c4]"></a>handle_state_packet</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, dfu_mesh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = handle_state_packet &rArr; start_ready &rArr; beacon_set &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_packet_matches_our_req
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwid_union_id_cmp
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwid_union_cmp
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_ready
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_beacon_type
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notify_state_packet
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_set
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_mesh_rx
</UL>

<P><STRONG><a name="[c9]"></a>handle_data_req_packet</STRONG> (Thumb, 224 bytes, Stack size 64 bytes, dfu_mesh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = handle_data_req_packet &rArr; relay_packet &rArr; packet_tx_dynamic
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_in_cache
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_transfer_has_entry
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_packet
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_tx_dynamic
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_mesh_rx
</UL>

<P><STRONG><a name="[b2]"></a>state_beacon_type</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, dfu_mesh.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_ready
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_state_packet
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_req
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_mesh_relay
</UL>

<P><STRONG><a name="[c0]"></a>send_progress_event</STRONG> (Thumb, 26 bytes, Stack size 40 bytes, dfu_mesh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = send_progress_event
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_data_packet
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_rx_data
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_mesh_rx
</UL>

<P><STRONG><a name="[cb]"></a>send_bank_notifications</STRONG> (Thumb, 122 bytes, Stack size 80 bytes, dfu_mesh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = send_bank_notifications &rArr; bootloader_info_entry_get &rArr; info_entry_get
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwid_union_cpy
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_evt_send
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_info_entry_get
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_mesh_start
</UL>

<P><STRONG><a name="[bb]"></a>start_find_fwid</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dfu_mesh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = start_find_fwid &rArr; beacon_set &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_set
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_rx_start
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_mesh_restart
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_mesh_start
</UL>

<P><STRONG><a name="[c6]"></a>start_ready</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, dfu_mesh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = start_ready &rArr; beacon_set &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_beacon_type
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_set
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_state_packet
</UL>

<P><STRONG><a name="[c1]"></a>request_missing_data</STRONG> (Thumb, 138 bytes, Stack size 88 bytes, dfu_mesh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = request_missing_data &rArr; dfu_transfer_get_oldest_missing_entry
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_transfer_get_oldest_missing_entry
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_rx_data
</UL>

<P><STRONG><a name="[cd]"></a>handle_fwid_packet</STRONG> (Thumb, 162 bytes, Stack size 56 bytes, dfu_mesh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = handle_fwid_packet &rArr; bootloader_is_newer &rArr; bootloader_info_entry_get &rArr; info_entry_get
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_is_newer
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_is_newer
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_mesh_rx
</UL>

<P><STRONG><a name="[d5]"></a>segment_is_missing</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, dfu_transfer_mesh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = segment_is_missing
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_transfer_has_entry
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_transfer_data
</UL>

<P><STRONG><a name="[d8]"></a>transfer_abort</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dfu_transfer_mesh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = transfer_abort &rArr; send_end_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_end_evt
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_transfer_data
</UL>

<P><STRONG><a name="[e4]"></a>setup_event</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, radio_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = setup_event
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_event_handler
</UL>

<P><STRONG><a name="[e0]"></a>__NVIC_SetPendingIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, radio_control.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_order
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init
</UL>

<P><STRONG><a name="[e8]"></a>set_next_tx</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, transport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = set_next_tx &rArr; rand_prng_get
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand_prng_get
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_rtc_irq_handler
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_tx
</UL>

<P><STRONG><a name="[e9]"></a>order_scan</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, transport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = order_scan &rArr; radio_order &rArr; fifo_push
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_packet_ref_count_dec
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_packet_acquire
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_order
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_start
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_idle_cb
</UL>

<P><STRONG><a name="[38]"></a>radio_tx_cb</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, transport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = radio_tx_cb &rArr; serial_handler_event_send &rArr; fifo_push
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_handler_event_send
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_packet_ref_count_dec
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_packet_adv_data_get
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_tx_evt_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> transport.o(.text)
</UL>
<P><STRONG><a name="[39]"></a>radio_rx_cb</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, transport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = radio_rx_cb &rArr; fifo_push
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_packet_ref_count_dec
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_push
</UL>
<BR>[Address Reference Count : 1]<UL><LI> transport.o(.text)
</UL>
<P><STRONG><a name="[3a]"></a>radio_idle_cb</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, transport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = radio_idle_cb &rArr; order_scan &rArr; radio_order &rArr; fifo_push
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;order_scan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> transport.o(.text)
</UL>
<P><STRONG><a name="[ef]"></a>order_next_rtc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, transport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = order_next_rtc
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_rtc_irq_handler
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_tx_abort
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_tx
</UL>

<P><STRONG><a name="[ee]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, transport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_tx_abort
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_init
</UL>

<P><STRONG><a name="[f0]"></a>__NVIC_DisableIRQ</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, transport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_tx_abort
</UL>

<P><STRONG><a name="[ed]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, transport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_init
</UL>

<P><STRONG><a name="[105]"></a>vli_numBits</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, uECC.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_verify
</UL>

<P><STRONG><a name="[f5]"></a>vli_add</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, uECC.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vli_add
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modSub
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modAdd
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_double_jacobian
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modInv
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast
</UL>

<P><STRONG><a name="[f6]"></a>vli_sub</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, uECC.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vli_sub
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_verify
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modSub
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modAdd
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modInv
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast
</UL>

<P><STRONG><a name="[f2]"></a>muladd</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, uECC.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = muladd
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mult
</UL>

<P><STRONG><a name="[f1]"></a>vli_mult</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, uECC.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = vli_mult &rArr; muladd
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;muladd
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modMult_fast
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modMult_n
</UL>

<P><STRONG><a name="[f3]"></a>vli_mmod_fast</STRONG> (Thumb, 398 bytes, Stack size 56 bytes, uECC.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vli_mmod_fast &rArr; vli_sub
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_cmp
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_set
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_sub
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_add
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modMult_fast
</UL>

<P><STRONG><a name="[f8]"></a>vli_modInv</STRONG> (Thumb, 286 bytes, Stack size 144 bytes, uECC.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = vli_modInv &rArr; vli_sub
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_rshift1
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_cmp
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_set
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_isZero
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_clear
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_sub
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_add
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_verify
</UL>

<P><STRONG><a name="[fc]"></a>EccPoint_double_jacobian</STRONG> (Thumb, 284 bytes, Stack size 88 bytes, uECC.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = EccPoint_double_jacobian &rArr; vli_modMult_fast &rArr; vli_mmod_fast &rArr; vli_sub
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modMult_fast
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modSub
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modAdd
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_rshift1
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_set
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_testBit
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_isZero
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_add
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_verify
</UL>

<P><STRONG><a name="[101]"></a>apply_z</STRONG> (Thumb, 52 bytes, Stack size 48 bytes, uECC.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = apply_z &rArr; vli_modMult_fast &rArr; vli_mmod_fast &rArr; vli_sub
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modMult_fast
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_verify
</UL>

<P><STRONG><a name="[102]"></a>XYcZ_add</STRONG> (Thumb, 166 bytes, Stack size 56 bytes, uECC.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = XYcZ_add &rArr; vli_modMult_fast &rArr; vli_mmod_fast &rArr; vli_sub
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modMult_fast
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modSub
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_set
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_verify
</UL>

<P><STRONG><a name="[103]"></a>vli_modMult_n</STRONG> (Thumb, 166 bytes, Stack size 232 bytes, uECC.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = vli_modMult_n &rArr; vli_mult &rArr; muladd
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_rshift1
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_set
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_clear
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mult
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_verify
</UL>

<P><STRONG><a name="[fa]"></a>vli_clear</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, uECC.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_verify
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modMult_n
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modInv
</UL>

<P><STRONG><a name="[f9]"></a>vli_isZero</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uECC.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_verify
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_double_jacobian
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modInv
</UL>

<P><STRONG><a name="[100]"></a>vli_testBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uECC.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_verify
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_double_jacobian
</UL>

<P><STRONG><a name="[f4]"></a>vli_set</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uECC.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_verify
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modMult_n
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_add
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_double_jacobian
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modInv
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast
</UL>

<P><STRONG><a name="[f7]"></a>vli_cmp</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, uECC.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vli_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_verify
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modAdd
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modInv
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast
</UL>

<P><STRONG><a name="[fb]"></a>vli_rshift1</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, uECC.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modMult_n
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_double_jacobian
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modInv
</UL>

<P><STRONG><a name="[fe]"></a>vli_modAdd</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, uECC.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vli_modAdd &rArr; vli_sub
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_cmp
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_sub
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_add
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_double_jacobian
</UL>

<P><STRONG><a name="[ff]"></a>vli_modSub</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, uECC.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vli_modSub &rArr; vli_sub
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_sub
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_add
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_verify
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_add
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_double_jacobian
</UL>

<P><STRONG><a name="[fd]"></a>vli_modMult_fast</STRONG> (Thumb, 24 bytes, Stack size 72 bytes, uECC.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = vli_modMult_fast &rArr; vli_mmod_fast &rArr; vli_sub
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mult
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_verify
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_add
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_z
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_double_jacobian
</UL>

<P><STRONG><a name="[104]"></a>vli_bytesToNative</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, uECC.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vli_bytesToNative
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_verify
</UL>

<P><STRONG><a name="[108]"></a>schedule_transmit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, serial_handler_uart.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_handler_event_send
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTE0_UART0_IRQHandler
</UL>

<P><STRONG><a name="[109]"></a>char_rx</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, serial_handler_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = char_rx &rArr; serial_handler_event_send &rArr; fifo_push
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_is_full
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_handler_event_send
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_push
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTE0_UART0_IRQHandler
</UL>

<P><STRONG><a name="[10e]"></a>__NVIC_SetPendingIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, serial_handler_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_rx
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_transmit
</UL>

<P><STRONG><a name="[111]"></a>error_code_translate</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, mesh_aci.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_command_handler
</UL>

<P><STRONG><a name="[10f]"></a>serial_command_handler</STRONG> (Thumb, 326 bytes, Stack size 64 bytes, mesh_aci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1068 + Unknown Stack Size
<LI>Call Chain = serial_command_handler &rArr; bootloader_cmd_send &rArr; bl_cmd_handler &rArr; dfu_mesh_timeout &rArr; signature_check &rArr; uECC_verify &rArr; vli_modMult_n &rArr; vli_mult &rArr; muladd
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_handler_event_send
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_cmd_send
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_code_translate
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_wait_for_completion
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_tx_evt_set
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_tx_evt_get
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_aci_command_check
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[12d]"></a>_handle_redirection</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED, UNUSED)
<BR><BR>[Called By]<UL></UL>
<HR></body></html>
